import 'package:cloud_firestore/cloud_firestore.dart';

class FirestoreService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  String? userUUID; // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö UUID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ UUID ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  Future<String> getOrCreateUserUUID() async {
    if (userUUID != null) {
      return userUUID!;
    }

    try {
      // üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ UUID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore
      QuerySnapshot querySnapshot = await _firestore.collection('users').limit(1).get();
      
      if (querySnapshot.docs.isNotEmpty) {
        userUUID = querySnapshot.docs.first.id; // ‡πÉ‡∏ä‡πâ UUID ‡πÄ‡∏î‡∏¥‡∏°
      } else {
        userUUID = _firestore.collection('users').doc().id; // ‡∏™‡∏£‡πâ‡∏≤‡∏á UUID ‡πÉ‡∏´‡∏°‡πà
        await _firestore.collection('users').doc(userUUID).set({
          'createdAt': FieldValue.serverTimestamp(),
        });
      }

      print("‚úÖ ‡πÉ‡∏ä‡πâ UUID: $userUUID");
      return userUUID!;
    } catch (e) {
      print("‚ùå Error ‡∏î‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á UUID: $e");
      rethrow;
    }
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏≠‡∏≤‡∏¢‡∏∏, ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å, ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á, ‡πÄ‡∏û‡∏®)
  Future<void> saveUserData(int age, String gender, double height, double weight) async {
    String uuid = await getOrCreateUserUUID();

    await _firestore.collection('users').doc(uuid).set({
      'age': age,
      'gender': gender,
      'height': height,
      'weight': weight,
      'createdAt': FieldValue.serverTimestamp(),
    }, SetOptions(merge: true));

    print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: UUID = $uuid");
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  Future<void> logFoodEntry(String name, int calories, String image, String category) async {
    String uuid = await getOrCreateUserUUID();

    await _firestore.collection('users').doc(uuid).collection('food_logs').add({
      'name': name,
      'calories': calories,
      'image': image,
      'category': category,
      'timestamp': FieldValue.serverTimestamp(),
    });

    print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô UUID: $uuid");
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
  Future<void> logExerciseEntry(String name, int duration, int caloriesBurned, String image) async {
    String uuid = await getOrCreateUserUUID();

    await _firestore.collection('users').doc(uuid).collection('exercise_logs').add({
      'name': name,
      'duration': duration,
      'calories_burned': caloriesBurned,
      'image': image,
      'timestamp': FieldValue.serverTimestamp(),
    });

    print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÉ‡∏ô UUID: $uuid");
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô
  Future<void> logSleepEntry(double sleepHours) async {
    String uuid = await getOrCreateUserUUID();

    await _firestore.collection('users').doc(uuid).collection('sleep_logs').add({
      'sleep_hours': sleepHours,
      'timestamp': FieldValue.serverTimestamp(),
    });

    print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≠‡∏ô‡πÉ‡∏ô UUID: $uuid");
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore
  Future<DocumentSnapshot> getUserData(String uuid) async {
    try {
      DocumentSnapshot userDoc = await _firestore.collection('users').doc(uuid).get();
      if (userDoc.exists) {
        print("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${userDoc.data()}");
      } else {
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UUID: $uuid");
      }
      return userDoc;
    } catch (e) {
      print("‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: $e");
      rethrow;
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ
  Future<int> getTotalCaloriesConsumed(String uuid) async {
    try {
      QuerySnapshot snapshot = await _firestore.collection('users').doc(uuid).collection('food_logs').get();

      int totalCalories = snapshot.docs.fold(0, (sum, doc) {
        int calories = (doc['calories'] ?? 0).toInt();
        return sum + calories;
      });

      print("‚úÖ ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ: $totalCalories kcal");
      return totalCalories;
    } catch (e) {
      print("‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ: $e");
      return 0;
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç
  Future<int> getTotalCaloriesBurned(String uuid) async {
    try {
      QuerySnapshot snapshot = await _firestore.collection('users').doc(uuid).collection('exercise_logs').get();

      int totalCaloriesBurned = snapshot.docs.fold(0, (sum, doc) {
        return sum + (int.tryParse(doc['calories_burned']?.toString() ?? '0') ?? 0);
      });

      print("‚úÖ ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç: $totalCaloriesBurned kcal");
      return totalCaloriesBurned;
    } catch (e) {
      print("‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç: $e");
      return 0;
    }
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
  Future<void> saveDailyCalories(int caloriesBurned) async {
    String uuid = await getOrCreateUserUUID();

    await _firestore.collection('users').doc(uuid).collection('daily_calories').add({
      'calories_burned': caloriesBurned,
      'date': Timestamp.now(),
    });

    print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô UUID: $uuid");
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏® ‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
  Future<void> saveUserMetrics(int age, String gender, double height, double weight) async {
    String uuid = await getOrCreateUserUUID();

    await _firestore.collection('users').doc(uuid).set({
      'age': age,
      'gender': gender,
      'height': height,
      'weight': weight,
    }, SetOptions(merge: true));

    print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô UUID: $uuid");
  }

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å BMR ‡πÅ‡∏•‡∏∞ Remaining Calories
  Future<void> saveUserBMRAndRemainingCalories(double bmr, int remainingCalories) async {
    String uuid = await getOrCreateUserUUID();

    await _firestore.collection('users').doc(uuid).collection('user_metrics').doc('daily_metrics').set({
      'bmr': bmr,
      'remainingCalories': remainingCalories,
      'updatedAt': FieldValue.serverTimestamp(),
    }, SetOptions(merge: true));

    print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ BMR: $bmr ‡πÅ‡∏•‡∏∞ Remaining Calories: $remainingCalories ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ BMR ‡πÅ‡∏•‡∏∞ Remaining Calories ‡∏à‡∏≤‡∏Å Firestore
  Future<Map<String, dynamic>?> getUserBMRAndRemainingCalories() async {
    String uuid = await getOrCreateUserUUID();

    DocumentSnapshot doc = await _firestore.collection('users').doc(uuid).collection('user_metrics').doc('daily_metrics').get();

    if (doc.exists) {
      print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ BMR ‡πÅ‡∏•‡∏∞ Remaining Calories ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${doc.data()}");
      return doc.data() as Map<String, dynamic>?;
    } else {
      print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BMR ‡πÅ‡∏•‡∏∞ Remaining Calories");
      return null;
    }
  }
}
